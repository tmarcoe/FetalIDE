/* The following code was generated by JFlex 1.6.1 */

package org.fife.ui.rsyntaxtextarea.modes;

import java.io.*;
import javax.swing.text.Segment;

import org.fife.ui.rsyntaxtextarea.*;
   

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>C:/Users/Timothy Marcoe/FetalIDE Archive/Fetal IDE/src/org/fife/ui/rsyntaxtextarea/modes/FetalJFlexTokenMaker.flex</tt>
 */
public class FetalJFlexTokenMaker extends AbstractJFlexCTokenMaker {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int MLC = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */

  
  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  7,  8,  0,  7,  6,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     7, 42,  4,  0,  0, 43, 45,  3, 11, 11, 10, 46,  6, 47,  6,  9, 
     2,  2,  2,  2,  2,  2,  2,  2,  2,  2, 42,  6, 48, 44, 49, 42, 
     0,  1, 15,  1, 27,  1, 40,  1,  1,  1,  1,  1,  1, 36,  1, 31, 
     1,  1,  1,  1, 24,  1, 20, 34,  1, 37,  1, 11,  5, 11, 42,  1, 
     0, 16, 23, 19, 30, 13, 32, 12, 33, 22, 41, 35, 17, 38, 18, 29, 
    26,  1, 21, 28, 14, 39,  1,  1,  1, 25,  1, 11, 50, 11, 42,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\2\1\1\2\1\3\1\4\1\5\1\6\2\7"+
    "\1\10\17\1\7\7\1\11\1\12\1\11\1\13\1\3"+
    "\1\14\1\3\1\0\1\15\2\4\1\16\1\17\11\1"+
    "\1\20\11\1\1\21\1\22\1\23\22\1\1\24\100\1";

  private static int [] zzUnpackAction() {
    int [] result = new int[152];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\63\0\146\0\231\0\314\0\377\0\u0132\0\u0165"+
    "\0\146\0\u0198\0\u01cb\0\146\0\u01fe\0\u0231\0\u0264\0\u0297"+
    "\0\u02ca\0\u02fd\0\u0330\0\u0363\0\u0396\0\u03c9\0\u03fc\0\u042f"+
    "\0\u0462\0\u0495\0\u04c8\0\146\0\u04fb\0\u052e\0\u0561\0\u0594"+
    "\0\u05c7\0\u05fa\0\u062d\0\146\0\u0660\0\u0693\0\u06c6\0\146"+
    "\0\u06f9\0\u072c\0\146\0\u075f\0\u0792\0\u07c5\0\146\0\u07f8"+
    "\0\u082b\0\u085e\0\u0891\0\u08c4\0\u08f7\0\u092a\0\u095d\0\u0990"+
    "\0\231\0\u09c3\0\u09f6\0\u0a29\0\u0a5c\0\u0a8f\0\u0ac2\0\u0af5"+
    "\0\u0b28\0\u0b5b\0\146\0\146\0\146\0\u0b8e\0\u0bc1\0\u0bf4"+
    "\0\u0c27\0\u0c5a\0\u0c8d\0\u0cc0\0\u0cf3\0\u0d26\0\u0d59\0\u0d8c"+
    "\0\u0dbf\0\u0df2\0\u0e25\0\u0e58\0\u0e8b\0\u0ebe\0\u0ef1\0\231"+
    "\0\u0f24\0\u0f57\0\u0f8a\0\u0fbd\0\u0ff0\0\u1023\0\u1056\0\u1089"+
    "\0\u10bc\0\u10ef\0\u1122\0\u1155\0\u1188\0\u11bb\0\u11ee\0\u1221"+
    "\0\u1254\0\u1287\0\u12ba\0\u12ed\0\u1320\0\u1353\0\u1386\0\u13b9"+
    "\0\u13ec\0\u141f\0\u1452\0\u1485\0\u14b8\0\u14eb\0\u151e\0\u1551"+
    "\0\u1584\0\u15b7\0\u15ea\0\u161d\0\u1650\0\u1683\0\u16b6\0\u16e9"+
    "\0\u171c\0\u174f\0\u1782\0\u17b5\0\u17e8\0\u181b\0\u184e\0\u1881"+
    "\0\u18b4\0\u18e7\0\u191a\0\u194d\0\u1980\0\u19b3\0\u19e6\0\u1a19"+
    "\0\u1a4c\0\u1a7f\0\u1ab2\0\u1ae5\0\u1b18\0\u1b4b\0\u1b7e\0\u1bb1";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[152];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\6\1\7\2\3\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\4\1\20"+
    "\1\21\1\22\1\23\2\4\1\24\1\25\2\4\1\26"+
    "\1\4\1\27\1\30\1\31\7\4\1\32\1\33\2\4"+
    "\1\34\2\13\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\10\43\1\44\1\43\1\45\50\43\64\0\2\4\11\0"+
    "\36\4\11\0\2\46\1\5\2\0\1\46\6\0\36\46"+
    "\11\0\3\47\1\50\1\47\1\51\2\47\1\52\52\47"+
    "\4\7\1\53\1\54\2\7\1\55\52\7\7\0\1\10"+
    "\64\0\1\56\1\57\41\0\1\34\62\0\1\34\7\0"+
    "\2\4\11\0\1\4\1\60\34\4\12\0\2\4\11\0"+
    "\5\4\1\61\30\4\12\0\2\4\11\0\21\4\1\62"+
    "\14\4\12\0\2\4\11\0\5\4\1\63\30\4\12\0"+
    "\2\4\11\0\1\4\1\64\10\4\1\65\6\4\1\66"+
    "\14\4\12\0\2\4\11\0\33\4\1\67\2\4\12\0"+
    "\2\4\11\0\11\4\1\70\24\4\12\0\2\4\11\0"+
    "\24\4\1\71\5\4\1\72\3\4\12\0\2\4\11\0"+
    "\21\4\1\73\14\4\12\0\2\4\11\0\11\4\1\74"+
    "\24\4\12\0\2\4\11\0\2\4\1\75\33\4\12\0"+
    "\2\4\11\0\13\4\1\76\22\4\12\0\2\4\11\0"+
    "\1\4\1\77\2\4\1\100\31\4\12\0\2\4\11\0"+
    "\4\4\1\101\31\4\12\0\2\4\11\0\16\4\1\102"+
    "\17\4\66\0\1\34\61\0\1\34\1\0\1\34\60\0"+
    "\1\34\2\0\1\34\63\0\1\13\63\0\1\13\63\0"+
    "\1\34\10\43\1\0\1\43\1\0\50\43\11\0\1\103"+
    "\51\0\3\46\2\0\1\46\6\0\36\46\11\0\3\51"+
    "\1\104\4\51\1\0\55\51\1\50\4\51\1\0\52\51"+
    "\3\0\1\104\57\0\10\55\1\0\56\55\1\105\1\54"+
    "\55\55\10\56\1\0\52\56\1\0\2\4\11\0\2\4"+
    "\1\106\33\4\12\0\2\4\11\0\20\4\1\107\15\4"+
    "\12\0\2\4\11\0\22\4\1\110\13\4\12\0\2\4"+
    "\11\0\12\4\1\111\23\4\12\0\2\4\11\0\22\4"+
    "\1\112\13\4\12\0\2\4\11\0\20\4\1\113\15\4"+
    "\12\0\2\4\11\0\21\4\1\114\14\4\12\0\2\4"+
    "\11\0\32\4\1\115\3\4\12\0\2\4\11\0\1\4"+
    "\1\116\34\4\12\0\2\4\11\0\16\4\1\117\17\4"+
    "\12\0\2\4\11\0\21\4\1\120\14\4\12\0\2\4"+
    "\11\0\12\4\1\121\23\4\12\0\2\4\11\0\11\4"+
    "\1\122\24\4\12\0\2\4\11\0\35\4\1\123\12\0"+
    "\2\4\11\0\7\4\1\124\3\4\1\125\22\4\12\0"+
    "\2\4\11\0\2\4\1\126\12\4\1\127\3\4\1\130"+
    "\14\4\12\0\2\4\11\0\16\4\1\131\17\4\12\0"+
    "\2\4\11\0\22\4\1\132\13\4\12\0\2\4\11\0"+
    "\3\4\1\133\4\4\1\134\6\4\1\135\10\4\1\136"+
    "\1\137\4\4\12\0\2\4\11\0\1\4\1\71\34\4"+
    "\12\0\2\4\11\0\4\4\1\140\31\4\12\0\2\4"+
    "\11\0\4\4\1\141\31\4\12\0\2\4\11\0\1\142"+
    "\35\4\12\0\2\4\11\0\2\4\1\71\33\4\12\0"+
    "\2\4\11\0\27\4\1\143\6\4\12\0\2\4\11\0"+
    "\13\4\1\144\22\4\12\0\2\4\11\0\22\4\1\125"+
    "\13\4\12\0\2\4\11\0\21\4\1\145\14\4\12\0"+
    "\2\4\11\0\5\4\1\146\30\4\12\0\2\4\11\0"+
    "\6\4\1\113\27\4\12\0\2\4\11\0\12\4\1\147"+
    "\23\4\12\0\2\4\11\0\1\4\1\150\34\4\12\0"+
    "\2\4\11\0\12\4\1\151\23\4\12\0\2\4\11\0"+
    "\12\4\1\113\23\4\12\0\2\4\11\0\1\4\1\130"+
    "\34\4\12\0\2\4\11\0\23\4\1\152\12\4\12\0"+
    "\2\4\11\0\34\4\1\153\1\4\12\0\2\4\11\0"+
    "\4\4\1\154\31\4\12\0\2\4\11\0\4\4\1\155"+
    "\31\4\12\0\2\4\11\0\4\4\1\156\31\4\12\0"+
    "\2\4\11\0\1\4\1\157\2\4\1\160\31\4\12\0"+
    "\2\4\11\0\21\4\1\161\14\4\12\0\2\4\11\0"+
    "\1\4\1\162\34\4\12\0\2\4\11\0\15\4\1\71"+
    "\20\4\12\0\2\4\11\0\20\4\1\71\15\4\12\0"+
    "\2\4\11\0\1\4\1\163\34\4\12\0\2\4\11\0"+
    "\33\4\1\164\2\4\12\0\2\4\11\0\1\4\1\165"+
    "\34\4\12\0\2\4\11\0\11\4\1\113\24\4\12\0"+
    "\2\4\11\0\1\4\1\166\34\4\12\0\2\4\11\0"+
    "\6\4\1\167\27\4\12\0\2\4\11\0\7\4\1\170"+
    "\26\4\12\0\2\4\11\0\32\4\1\171\3\4\12\0"+
    "\2\4\11\0\24\4\1\172\11\4\12\0\2\4\11\0"+
    "\12\4\1\173\23\4\12\0\2\4\11\0\2\4\1\107"+
    "\33\4\12\0\2\4\11\0\5\4\1\174\30\4\12\0"+
    "\2\4\11\0\11\4\1\175\24\4\12\0\2\4\11\0"+
    "\20\4\1\176\15\4\12\0\2\4\11\0\15\4\1\141"+
    "\20\4\12\0\2\4\11\0\6\4\1\177\27\4\12\0"+
    "\2\4\11\0\4\4\1\163\31\4\12\0\2\4\11\0"+
    "\11\4\1\71\24\4\12\0\2\4\11\0\16\4\1\71"+
    "\17\4\12\0\2\4\11\0\11\4\1\130\24\4\12\0"+
    "\2\4\11\0\4\4\1\200\31\4\12\0\2\4\11\0"+
    "\1\130\35\4\12\0\2\4\11\0\2\4\1\130\33\4"+
    "\12\0\2\4\11\0\4\4\1\201\31\4\12\0\2\4"+
    "\11\0\14\4\1\202\21\4\12\0\2\4\11\0\5\4"+
    "\1\107\30\4\12\0\2\4\11\0\4\4\1\203\31\4"+
    "\12\0\2\4\11\0\12\4\1\204\23\4\12\0\2\4"+
    "\11\0\7\4\1\205\26\4\12\0\2\4\11\0\2\4"+
    "\1\206\33\4\12\0\2\4\11\0\6\4\1\130\27\4"+
    "\12\0\2\4\11\0\5\4\1\130\30\4\12\0\2\4"+
    "\11\0\25\4\1\207\10\4\12\0\2\4\11\0\6\4"+
    "\1\210\27\4\12\0\2\4\11\0\4\4\1\211\31\4"+
    "\12\0\2\4\11\0\11\4\1\212\24\4\12\0\2\4"+
    "\11\0\25\4\1\71\10\4\12\0\2\4\11\0\1\4"+
    "\1\213\34\4\12\0\2\4\11\0\7\4\1\107\26\4"+
    "\12\0\2\4\11\0\13\4\1\214\22\4\12\0\2\4"+
    "\11\0\12\4\1\215\23\4\12\0\2\4\11\0\26\4"+
    "\1\216\7\4\12\0\2\4\11\0\5\4\1\217\30\4"+
    "\12\0\2\4\11\0\16\4\1\220\17\4\12\0\2\4"+
    "\11\0\1\4\1\221\34\4\12\0\2\4\11\0\1\4"+
    "\1\222\34\4\12\0\2\4\11\0\2\4\1\223\33\4"+
    "\12\0\2\4\11\0\1\4\1\224\34\4\12\0\2\4"+
    "\11\0\14\4\1\225\21\4\12\0\2\4\11\0\12\4"+
    "\1\226\23\4\12\0\2\4\11\0\27\4\1\71\6\4"+
    "\12\0\2\4\11\0\15\4\1\227\20\4\12\0\2\4"+
    "\11\0\21\4\1\230\14\4\12\0\2\4\11\0\16\4"+
    "\1\107\17\4\12\0\2\4\11\0\6\4\1\71\27\4"+
    "\11\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7140];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\5\1\1\11\2\1\1\11\17\1\1\11"+
    "\7\1\1\11\3\1\1\11\1\1\1\0\1\11\3\1"+
    "\1\11\23\1\3\11\123\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[152];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;


  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
   
   /**   
    * Constructor.  This must be here because JFlex does not generate a   
    * no-parameter constructor.   
    */   
   public FetalJFlexTokenMaker() {   
   		super();
   } 
     
   public FetalJFlexTokenMaker(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }
  
   /**   
    * Adds the token specified to the current linked list of tokens.   
    *   
    * @param tokenType The token's type.   
    * @see #addToken(int, int, int)   
    */   
   /**   
    * Adds the token specified to the current linked list of tokens.   
    *   
    * @param tokenType The token's type.   
    */   
   private void addToken(int tokenType) {   
      addToken(zzStartRead, zzMarkedPos-1, tokenType);   
   }   
   
   /**   
    * Adds the token specified to the current linked list of tokens.   
    *   
    * @param tokenType The token's type.   
    * @see #addHyperlinkToken(int, int, int)   
    */   
   private void addToken(int start, int end, int tokenType) {   
      int so = start + offsetShift;   
      addToken(zzBuffer, start,end, tokenType, so, false);   
   }   
   
   /**   
    * Adds the token specified to the current linked list of tokens.   
    *   
    * @param array The character array.   
    * @param start The starting offset in the array.   
    * @param end The ending offset in the array.   
    * @param tokenType The token's type.   
    * @param startOffset The offset in the document at which this token   
    *        occurs.   
    * @param hyperlink Whether this token is a hyperlink.   
    */   
   public void addToken(char[] array, int start, int end, int tokenType,   
                  int startOffset, boolean hyperlink) {   
      super.addToken(array, start,end, tokenType, startOffset, hyperlink);   
      zzStartRead = zzMarkedPos;   
   }   
   
   /**   
    * Returns the text to place at the beginning and end of a   
    * line to "comment" it in a this programming language.   
    *   
    * @return The start and end strings to add to a line to "comment"   
    *         it out.   
    */   
   public String[] getLineCommentStartAndEnd() {   
      return new String[] { "//", null };   
   }   
   
   /**   
    * Returns the first token in the linked list of tokens generated   
    * from <code>text</code>.  This method must be implemented by   
    * subclasses so they can correctly implement syntax highlighting.   
    *   
    * @param text The text from which to get tokens.   
    * @param initialTokenType The token type we should start with.   
    * @param startOffset The offset into the document at which   
    *        <code>text</code> starts.   
    * @return The first <code>Token</code> in a linked list representing   
    *         the syntax highlighted text.   
    */   
   public Token getTokenList(Segment text, int initialTokenType, int startOffset) {   
   
      resetTokenList();   
      this.offsetShift = -text.offset + startOffset;   
   
      // Start off in the proper state.   
      int state = Token.NULL;   
      switch (initialTokenType) {   
                  case Token.COMMENT_MULTILINE:   
            state = MLC;   
            start = text.offset;   
            break;   
   
         /* No documentation comments */   
         default:   
            state = Token.NULL;   
      }   
   
      s = text;   
      try {   
         yyreset(zzReader);   
         yybegin(state);   
         return yylex();   
      } catch (IOException ioe) {   
         ioe.printStackTrace();   
         return new TokenImpl();   
      }   
   
   }   
   
   /**   
    * Refills the input buffer.   
    *   
    * @return      <code>true</code> if EOF was reached, otherwise   
    *              <code>false</code>.   
    */   
   private boolean zzRefill() {   
      return zzCurrentPos>=s.offset+s.count;   
   }   
   
   /**   
    * Resets the scanner to read from a new input stream.   
    * Does not close the old reader.   
    *   
    * All internal variables are reset, the old input stream    
    * <b>cannot</b> be reused (internal buffer is discarded and lost).   
    * Lexical state is set to <tt>YY_INITIAL</tt>.   
    *   
    * @param reader   the new input stream    
    */  
     
   public final void yyreset(Reader reader) {   
      // 's' has been updated.   
      zzBuffer = s.array;   
      /*   
       * We replaced the line below with the two below it because zzRefill   
       * no longer "refills" the buffer (since the way we do it, it's always   
       * "full" the first time through, since it points to the segment's   
       * array).  So, we assign zzEndRead here.   
       */   
      //zzStartRead = zzEndRead = s.offset;   
      zzStartRead = s.offset;   
      zzEndRead = zzStartRead + s.count - 1;   
      zzCurrentPos = zzMarkedPos = s.offset;   
      zzLexicalState = YYINITIAL;   
      zzReader = reader;   
      zzAtEOF  = false;   
   }   
   


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public FetalJFlexTokenMaker(java.io.Reader in) {
    this.zzReader = in;
  }



    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;

      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = zzBufferL[zzCurrentPosL++];
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
            	zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            switch (zzLexicalState) {
            case YYINITIAL: {
              addNullToken(); return firstToken;
            }
            case 153: break;
            case MLC: {
              addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
            }
            case 154: break;
            default:
        return null;
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { addToken(Token.IDENTIFIER);
            }
          case 21: break;
          case 2: 
            { addToken(Token.LITERAL_NUMBER_DECIMAL_INT);
            }
          case 22: break;
          case 3: 
            { addToken(Token.ERROR_CHAR); addNullToken(); return firstToken;
            }
          case 23: break;
          case 4: 
            { addToken(Token.ERROR_STRING_DOUBLE); addNullToken(); return firstToken;
            }
          case 24: break;
          case 5: 
            { addToken(Token.WHITESPACE);
            }
          case 25: break;
          case 6: 
            { addNullToken(); return firstToken;
            }
          case 26: break;
          case 7: 
            { addToken(Token.OPERATOR);
            }
          case 27: break;
          case 8: 
            { addToken(Token.SEPARATOR);
            }
          case 28: break;
          case 9: 
            { 
            }
          case 29: break;
          case 10: 
            { addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
            }
          case 30: break;
          case 11: 
            { addToken(Token.ERROR_NUMBER_FORMAT);
            }
          case 31: break;
          case 12: 
            { addToken(Token.ERROR_CHAR);
            }
          case 32: break;
          case 13: 
            { addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);
            }
          case 33: break;
          case 14: 
            { addToken(Token.COMMENT_EOL); addNullToken(); return firstToken;
            }
          case 34: break;
          case 15: 
            { start = zzMarkedPos-2; yybegin(MLC);
            }
          case 35: break;
          case 16: 
            { addToken(Token.RESERVED_WORD);
            }
          case 36: break;
          case 17: 
            { yybegin(YYINITIAL); addToken(start,zzStartRead+2-1, Token.COMMENT_MULTILINE);
            }
          case 37: break;
          case 18: 
            { addToken(Token.LITERAL_CHAR);
            }
          case 38: break;
          case 19: 
            { addToken(Token.ERROR_STRING_DOUBLE);
            }
          case 39: break;
          case 20: 
            { addToken(Token.DATA_TYPE);
            }
          case 40: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
