/* The following code was generated by JFlex 1.6.1 */

package org.fife.ui.rsyntaxtextarea.modes;

import java.io.*;
import javax.swing.text.Segment;

import org.fife.ui.rsyntaxtextarea.*;
   

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>C:/Users/Timothy Marcoe/FetalIDE Archive/Fetal IDE/src/org/fife/ui/rsyntaxtextarea/modes/FetalJFlexTokenMaker.flex</tt>
 */
public class FetalJFlexTokenMaker extends AbstractJFlexCTokenMaker {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int MLC = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\6\1\5\1\11\1\12\1\10\22\0\1\6\1\63\1\7"+
    "\1\0\1\0\1\56\1\60\1\4\2\15\1\14\1\56\1\4\1\56"+
    "\1\16\1\13\12\2\1\64\1\4\1\56\1\57\1\62\1\4\1\0"+
    "\1\1\1\26\1\1\1\37\1\1\1\53\6\1\1\47\1\1\1\42"+
    "\3\1\1\54\1\34\1\1\1\32\1\45\1\1\1\50\1\1\1\15"+
    "\1\3\1\15\1\61\1\1\1\0\1\27\1\17\1\31\1\24\1\20"+
    "\1\43\1\21\1\44\1\22\1\55\1\46\1\30\1\51\1\23\1\41"+
    "\1\36\1\1\1\33\1\40\1\25\1\52\3\1\1\35\1\1\1\15"+
    "\1\65\1\15\1\4\6\0\1\11\u1fa2\0\1\11\1\11\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\2\1\1\2\1\3\1\4\1\5\2\6\1\7"+
    "\20\1\4\6\1\1\1\6\1\10\1\11\1\10\1\0"+
    "\1\12\2\5\1\13\1\14\1\15\5\1\1\16\23\1"+
    "\1\17\1\20\1\21\13\1\1\22\123\1";

  private static int [] zzUnpackAction() {
    int [] result = new int[166];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\66\0\154\0\242\0\330\0\154\0\u010e\0\u0144"+
    "\0\u017a\0\u01b0\0\154\0\u01e6\0\u021c\0\u0252\0\u0288\0\u02be"+
    "\0\u02f4\0\u032a\0\u0360\0\u0396\0\u03cc\0\u0402\0\u0438\0\u046e"+
    "\0\u04a4\0\u04da\0\u0510\0\u0546\0\u057c\0\u05b2\0\154\0\u01b0"+
    "\0\u05e8\0\u061e\0\154\0\u0654\0\u068a\0\u06c0\0\u06f6\0\u072c"+
    "\0\154\0\u0762\0\154\0\u0798\0\u07ce\0\u0804\0\u083a\0\u0870"+
    "\0\242\0\u08a6\0\u08dc\0\u0912\0\u0948\0\u097e\0\u09b4\0\u09ea"+
    "\0\u0a20\0\u0a56\0\u0a8c\0\u0ac2\0\u0af8\0\u0b2e\0\u0b64\0\u0b9a"+
    "\0\u0bd0\0\u0c06\0\u0c3c\0\u0c72\0\154\0\u0ca8\0\154\0\u0cde"+
    "\0\u0d14\0\u0d4a\0\u0d80\0\u0db6\0\u0dec\0\u0e22\0\u0e58\0\u0e8e"+
    "\0\u0ec4\0\u0efa\0\242\0\u0f30\0\u0f66\0\u0f9c\0\u0fd2\0\u1008"+
    "\0\u103e\0\u1074\0\u10aa\0\u10e0\0\u1116\0\u114c\0\u1182\0\u11b8"+
    "\0\u11ee\0\u1224\0\u125a\0\u1290\0\u12c6\0\u12fc\0\u1332\0\u1368"+
    "\0\u139e\0\u13d4\0\u140a\0\u1440\0\u1476\0\u14ac\0\u14e2\0\u1518"+
    "\0\u154e\0\u1584\0\u15ba\0\u15f0\0\u1626\0\u165c\0\u1692\0\u16c8"+
    "\0\u16fe\0\u1734\0\u176a\0\u17a0\0\u17d6\0\u180c\0\u1842\0\u1878"+
    "\0\u18ae\0\u18e4\0\u191a\0\u1950\0\u1986\0\u19bc\0\u19f2\0\u1a28"+
    "\0\u1a5e\0\u1a94\0\u1aca\0\u1b00\0\u1b36\0\u1b6c\0\u1ba2\0\u1bd8"+
    "\0\u1c0e\0\u1c44\0\u1c7a\0\u1cb0\0\u1ce6\0\u1d1c\0\u1d52\0\u1d88"+
    "\0\u1dbe\0\u1df4\0\u1e2a\0\u1e60\0\u1e96\0\u1ecc\0\u1f02\0\u1f38"+
    "\0\u1f6e\0\u1fa4\0\u1fda\0\u2010\0\u2046\0\u207c";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[166];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\2\3\1\6\1\7\1\10\2\0"+
    "\1\7\1\11\1\12\1\13\1\3\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\4\1\23\1\24\1\25"+
    "\4\4\1\26\1\4\1\27\1\30\1\4\1\31\5\4"+
    "\1\32\1\33\3\4\1\12\1\34\1\35\1\36\1\37"+
    "\1\40\1\37\1\41\5\42\1\43\6\42\1\44\51\42"+
    "\67\0\2\4\13\0\1\45\37\4\10\0\2\46\1\5"+
    "\1\46\5\0\1\46\5\0\37\46\16\0\1\7\3\0"+
    "\1\7\53\0\3\10\1\47\1\10\1\50\1\10\1\51"+
    "\56\10\13\0\1\52\1\53\42\0\1\37\65\0\1\37"+
    "\7\0\2\4\13\0\1\45\1\4\1\54\20\4\1\55"+
    "\14\4\11\0\2\4\13\0\1\45\4\4\1\56\4\4"+
    "\1\57\25\4\11\0\2\4\13\0\1\45\1\4\1\60"+
    "\35\4\11\0\2\4\13\0\1\45\24\4\1\61\5\4"+
    "\1\62\4\4\11\0\2\4\13\0\1\45\33\4\1\63"+
    "\3\4\11\0\2\4\13\0\1\45\1\4\1\64\6\4"+
    "\1\65\26\4\11\0\2\4\13\0\1\45\14\4\1\66"+
    "\5\4\1\67\14\4\11\0\2\4\13\0\1\45\5\4"+
    "\1\70\3\4\1\71\25\4\11\0\2\4\13\0\1\45"+
    "\1\4\1\72\1\4\1\73\16\4\1\74\14\4\11\0"+
    "\2\4\13\0\1\45\14\4\1\75\5\4\1\76\14\4"+
    "\11\0\2\4\13\0\1\45\14\4\1\77\22\4\11\0"+
    "\2\4\13\0\1\45\6\4\1\100\30\4\11\0\2\4"+
    "\13\0\1\45\1\101\36\4\11\0\2\4\13\0\1\45"+
    "\10\4\1\102\26\4\11\0\2\4\13\0\1\45\10\4"+
    "\1\103\26\4\11\0\2\4\13\0\1\45\17\4\1\104"+
    "\17\4\67\0\1\37\2\0\1\37\63\0\1\37\64\0"+
    "\1\37\1\0\1\37\71\0\1\37\5\42\1\0\6\42"+
    "\1\0\51\42\13\0\1\105\53\0\1\106\15\0\37\106"+
    "\10\0\4\46\5\0\1\46\5\0\37\46\10\0\5\50"+
    "\1\0\2\50\3\0\56\50\1\47\3\50\1\107\56\50"+
    "\5\52\1\0\2\52\3\0\53\52\1\0\2\4\13\0"+
    "\1\45\2\4\1\110\34\4\11\0\2\4\13\0\1\45"+
    "\22\4\1\111\14\4\11\0\2\4\13\0\1\45\5\4"+
    "\1\61\31\4\11\0\2\4\13\0\1\45\21\4\1\112"+
    "\15\4\11\0\2\4\13\0\1\45\6\4\1\113\30\4"+
    "\11\0\2\4\13\0\1\45\17\4\1\114\17\4\11\0"+
    "\2\4\13\0\1\45\32\4\1\115\4\4\11\0\2\4"+
    "\13\0\1\45\1\116\11\4\1\117\4\4\1\120\17\4"+
    "\11\0\2\4\13\0\1\45\6\4\1\121\7\4\1\122"+
    "\3\4\1\123\14\4\11\0\2\4\13\0\1\45\33\4"+
    "\1\112\3\4\11\0\2\4\13\0\1\45\5\4\1\124"+
    "\31\4\11\0\2\4\13\0\1\45\5\4\1\125\31\4"+
    "\11\0\2\4\13\0\1\45\3\4\1\126\33\4\11\0"+
    "\2\4\13\0\1\45\5\4\1\127\31\4\11\0\2\4"+
    "\13\0\1\45\21\4\1\130\15\4\11\0\2\4\13\0"+
    "\1\45\22\4\1\131\14\4\11\0\2\4\13\0\1\45"+
    "\1\4\1\132\35\4\11\0\2\4\13\0\1\45\32\4"+
    "\1\133\4\4\11\0\2\4\13\0\1\45\3\4\1\134"+
    "\33\4\11\0\2\4\13\0\1\45\14\4\1\135\22\4"+
    "\11\0\2\4\13\0\1\45\36\4\1\136\11\0\2\4"+
    "\13\0\1\45\11\4\1\57\25\4\11\0\2\4\13\0"+
    "\1\45\17\4\1\137\17\4\11\0\2\4\13\0\1\45"+
    "\5\4\1\140\31\4\11\0\2\106\14\0\37\106\11\0"+
    "\2\4\13\0\1\45\3\4\1\141\33\4\11\0\2\4"+
    "\13\0\1\45\11\4\1\142\25\4\11\0\2\4\13\0"+
    "\1\45\1\4\1\61\35\4\11\0\2\4\13\0\1\45"+
    "\7\4\1\143\3\4\1\144\4\4\1\145\7\4\1\146"+
    "\1\147\5\4\11\0\2\4\13\0\1\45\22\4\1\150"+
    "\14\4\11\0\2\4\13\0\1\45\1\151\36\4\11\0"+
    "\2\4\13\0\1\45\3\4\1\130\33\4\11\0\2\4"+
    "\13\0\1\45\3\4\1\152\33\4\11\0\2\4\13\0"+
    "\1\45\11\4\1\153\25\4\11\0\2\4\13\0\1\45"+
    "\1\4\1\123\35\4\11\0\2\4\13\0\1\45\23\4"+
    "\1\154\13\4\11\0\2\4\13\0\1\45\10\4\1\155"+
    "\26\4\11\0\2\4\13\0\1\45\35\4\1\156\1\4"+
    "\11\0\2\4\13\0\1\45\10\4\1\157\26\4\11\0"+
    "\2\4\13\0\1\45\2\4\1\160\34\4\11\0\2\4"+
    "\13\0\1\45\6\4\1\61\30\4\11\0\2\4\13\0"+
    "\1\45\27\4\1\161\7\4\11\0\2\4\13\0\1\45"+
    "\5\4\1\116\31\4\11\0\2\4\13\0\1\45\32\4"+
    "\1\162\4\4\11\0\2\4\13\0\1\45\4\4\1\130"+
    "\32\4\11\0\2\4\13\0\1\45\3\4\1\163\33\4"+
    "\11\0\2\4\13\0\1\45\1\4\1\164\35\4\11\0"+
    "\2\4\13\0\1\45\34\4\1\165\2\4\11\0\2\4"+
    "\13\0\1\45\10\4\1\166\26\4\11\0\2\4\13\0"+
    "\1\45\4\4\1\61\32\4\11\0\2\4\13\0\1\45"+
    "\1\4\1\167\35\4\11\0\2\4\13\0\1\45\10\4"+
    "\1\170\26\4\11\0\2\4\13\0\1\45\10\4\1\171"+
    "\26\4\11\0\2\4\13\0\1\45\1\4\1\172\6\4"+
    "\1\173\26\4\11\0\2\4\13\0\1\45\22\4\1\174"+
    "\14\4\11\0\2\4\13\0\1\45\1\4\1\175\35\4"+
    "\11\0\2\4\13\0\1\45\14\4\1\130\22\4\11\0"+
    "\2\4\13\0\1\45\1\4\1\176\35\4\11\0\2\4"+
    "\13\0\1\45\32\4\1\177\4\4\11\0\2\4\13\0"+
    "\1\45\1\4\1\200\35\4\11\0\2\4\13\0\1\45"+
    "\24\4\1\201\12\4\11\0\2\4\13\0\1\45\16\4"+
    "\1\61\20\4\11\0\2\4\13\0\1\45\6\4\1\202"+
    "\30\4\11\0\2\4\13\0\1\45\21\4\1\61\15\4"+
    "\11\0\2\4\13\0\1\45\1\4\1\203\35\4\11\0"+
    "\2\4\13\0\1\45\33\4\1\204\3\4\11\0\2\4"+
    "\13\0\1\45\3\4\1\205\33\4\11\0\2\4\13\0"+
    "\1\45\4\4\1\206\32\4\11\0\2\4\13\0\1\45"+
    "\12\4\1\207\24\4\11\0\2\4\13\0\1\45\3\4"+
    "\1\210\33\4\11\0\2\4\13\0\1\45\6\4\1\112"+
    "\30\4\11\0\2\4\13\0\1\45\10\4\1\211\26\4"+
    "\11\0\2\4\13\0\1\45\11\4\1\212\25\4\11\0"+
    "\2\4\13\0\1\45\14\4\1\213\22\4\11\0\2\4"+
    "\13\0\1\45\21\4\1\214\15\4\11\0\2\4\13\0"+
    "\1\45\16\4\1\157\20\4\11\0\2\4\13\0\1\45"+
    "\4\4\1\215\32\4\11\0\2\4\13\0\1\45\10\4"+
    "\1\203\26\4\11\0\2\4\13\0\1\45\14\4\1\123"+
    "\22\4\11\0\2\4\13\0\1\45\10\4\1\216\26\4"+
    "\11\0\2\4\13\0\1\45\6\4\1\217\30\4\11\0"+
    "\2\4\13\0\1\45\15\4\1\220\21\4\11\0\2\4"+
    "\13\0\1\45\22\4\1\221\14\4\11\0\2\4\13\0"+
    "\1\45\14\4\1\61\22\4\11\0\2\4\13\0\1\45"+
    "\17\4\1\61\17\4\11\0\2\4\13\0\1\45\6\4"+
    "\1\125\30\4\11\0\2\4\13\0\1\45\2\4\1\123"+
    "\34\4\11\0\2\4\13\0\1\45\6\4\1\123\30\4"+
    "\11\0\2\4\13\0\1\45\11\4\1\112\25\4\11\0"+
    "\2\4\13\0\1\45\4\4\1\123\32\4\11\0\2\4"+
    "\13\0\1\45\10\4\1\222\26\4\11\0\2\4\13\0"+
    "\1\45\3\4\1\223\33\4\11\0\2\4\13\0\1\45"+
    "\12\4\1\224\24\4\11\0\2\4\13\0\1\45\6\4"+
    "\1\225\30\4\11\0\2\4\13\0\1\45\11\4\1\123"+
    "\25\4\11\0\2\4\13\0\1\45\1\4\1\125\35\4"+
    "\11\0\2\4\13\0\1\45\25\4\1\226\11\4\11\0"+
    "\2\4\13\0\1\45\12\4\1\227\24\4\11\0\2\4"+
    "\13\0\1\45\4\4\1\230\32\4\11\0\2\4\13\0"+
    "\1\45\10\4\1\231\26\4\11\0\2\4\13\0\1\45"+
    "\14\4\1\232\22\4\11\0\2\4\13\0\1\45\25\4"+
    "\1\61\11\4\11\0\2\4\13\0\1\45\1\4\1\233"+
    "\35\4\11\0\2\4\13\0\1\45\27\4\1\61\7\4"+
    "\11\0\2\4\13\0\1\45\12\4\1\112\24\4\11\0"+
    "\2\4\13\0\1\45\1\234\36\4\11\0\2\4\13\0"+
    "\1\45\3\4\1\235\33\4\11\0\2\4\13\0\1\45"+
    "\26\4\1\236\10\4\11\0\2\4\13\0\1\45\11\4"+
    "\1\237\25\4\11\0\2\4\13\0\1\45\17\4\1\240"+
    "\17\4\11\0\2\4\13\0\1\45\1\4\1\241\35\4"+
    "\11\0\2\4\13\0\1\45\1\4\1\242\35\4\11\0"+
    "\2\4\13\0\1\45\6\4\1\243\30\4\11\0\2\4"+
    "\13\0\1\45\1\4\1\227\35\4\11\0\2\4\13\0"+
    "\1\45\15\4\1\244\21\4\11\0\2\4\13\0\1\45"+
    "\3\4\1\245\33\4\11\0\2\4\13\0\1\45\16\4"+
    "\1\246\20\4\11\0\2\4\13\0\1\45\22\4\1\141"+
    "\14\4\11\0\2\4\13\0\1\45\17\4\1\112\17\4"+
    "\10\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8370];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\2\1\1\11\4\1\1\11\23\1\1\11"+
    "\3\1\1\11\1\1\1\0\3\1\1\11\1\1\1\11"+
    "\31\1\1\11\1\1\1\11\137\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[166];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  

  /* user code: */
   
   /**   
    * Constructor.  This must be here because JFlex does not generate a   
    * no-parameter constructor.   
    */   
   public FetalJFlexTokenMaker() {   
   		super();
   } 
     
   public FetalJFlexTokenMaker(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }
  
   
   /**   
    * Adds the token specified to the current linked list of tokens.   
    *   
    * @param tokenType The token's type.   
    */   
   private void addToken(int tokenType) {   
      addToken(zzStartRead, zzMarkedPos-1, tokenType);   
   }   
   
   /**   
    * Adds the token specified to the current linked list of tokens.   
    *   
    * @param tokenType The token's type.   
    * @see #addHyperlinkToken(int, int, int)   
    */   
   private void addToken(int start, int end, int tokenType) {   
      int so = start + offsetShift;   
      addToken(zzBuffer, start,end, tokenType, so, false);   
   }   
   
   /**   
    * Adds the token specified to the current linked list of tokens.   
    *   
    * @param array The character array.   
    * @param start The starting offset in the array.   
    * @param end The ending offset in the array.   
    * @param tokenType The token's type.   
    * @param startOffset The offset in the document at which this token   
    *        occurs.   
    * @param hyperlink Whether this token is a hyperlink.   
    */   
   public void addToken(char[] array, int start, int end, int tokenType,   
                  int startOffset, boolean hyperlink) {   
      super.addToken(array, start,end, tokenType, startOffset, hyperlink);   
      zzStartRead = zzMarkedPos;   
   }   
   
   /**   
    * Returns the text to place at the beginning and end of a   
    * line to "comment" it in a this programming language.   
    *   
    * @return The start and end strings to add to a line to "comment"   
    *         it out.   
    */   
   public String[] getLineCommentStartAndEnd() {   
      return new String[] { "//", null };   
   }   
   
   /**   
    * Returns the first token in the linked list of tokens generated   
    * from <code>text</code>.  This method must be implemented by   
    * subclasses so they can correctly implement syntax highlighting.   
    *   
    * @param text The text from which to get tokens.   
    * @param initialTokenType The token type we should start with.   
    * @param startOffset The offset into the document at which   
    *        <code>text</code> starts.   
    * @return The first <code>Token</code> in a linked list representing   
    *         the syntax highlighted text.   
    */   
   public Token getTokenList(Segment text, int initialTokenType, int startOffset) {   
   
      resetTokenList();   
      this.offsetShift = -text.offset + startOffset;   
   
      // Start off in the proper state.   
      int state = Token.NULL;   
      switch (initialTokenType) {   
                  case Token.COMMENT_MULTILINE:   
            state = MLC;   
            start = text.offset;   
            break;   
   
         /* No documentation comments */   
         default:   
            state = Token.NULL;   
      }   
   
      s = text;   
      try {   
         yyreset(zzReader);   
         yybegin(state);   
         return yylex();   
      } catch (IOException ioe) {   
         ioe.printStackTrace();   
         return new TokenImpl();   
      }   
   
   }   
   
   /**   
    * Refills the input buffer.   
    *   
    * @return      <code>true</code> if EOF was reached, otherwise   
    *              <code>false</code>.   
    */   
   private boolean zzRefill() {   
      return zzCurrentPos>=s.offset+s.count;   
   }   
   
   /**   
    * Resets the scanner to read from a new input stream.   
    * Does not close the old reader.   
    *   
    * All internal variables are reset, the old input stream    
    * <b>cannot</b> be reused (internal buffer is discarded and lost).   
    * Lexical state is set to <tt>YY_INITIAL</tt>.   
    *   
    * @param reader   the new input stream    
    */  
     
   public final void yyreset(Reader reader) {   
      // 's' has been updated.   
      zzBuffer = s.array;   
      /*   
       * We replaced the line below with the two below it because zzRefill   
       * no longer "refills" the buffer (since the way we do it, it's always   
       * "full" the first time through, since it points to the segment's   
       * array).  So, we assign zzEndRead here.   
       */   
      //zzStartRead = zzEndRead = s.offset;   
      zzStartRead = s.offset;   
      zzEndRead = zzStartRead + s.count - 1;   
      zzCurrentPos = zzMarkedPos = s.offset;   
      zzLexicalState = YYINITIAL;   
      zzReader = reader;    
      zzAtEOF  = false;   
   }   
   


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public FetalJFlexTokenMaker(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 210) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


     
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }



  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
                zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            switch (zzLexicalState) {
            case YYINITIAL: {
              addNullToken(); return firstToken;
            }
            case 167: break;
            case MLC: {
              addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
            }
            case 168: break;
            default:
        return null;
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { addToken(Token.IDENTIFIER);
            }
          case 19: break;
          case 2: 
            { addToken(Token.LITERAL_NUMBER_DECIMAL_INT);
            }
          case 20: break;
          case 3: 
            { addNullToken(); return firstToken;
            }
          case 21: break;
          case 4: 
            { addToken(Token.WHITESPACE);
            }
          case 22: break;
          case 5: 
            { addToken(Token.ERROR_STRING_DOUBLE); addNullToken(); return firstToken;
            }
          case 23: break;
          case 6: 
            { addToken(Token.OPERATOR);
            }
          case 24: break;
          case 7: 
            { addToken(Token.SEPARATOR);
            }
          case 25: break;
          case 8: 
            { 
            }
          case 26: break;
          case 9: 
            { addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
            }
          case 27: break;
          case 10: 
            { addToken(Token.ERROR_NUMBER_FORMAT);
            }
          case 28: break;
          case 11: 
            { addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);
            }
          case 29: break;
          case 12: 
            { addToken(Token.COMMENT_EOL); addNullToken(); return firstToken;
            }
          case 30: break;
          case 13: 
            { start = zzMarkedPos-2; yybegin(MLC);
            }
          case 31: break;
          case 14: 
            { addToken(Token.RESERVED_WORD);
            }
          case 32: break;
          case 15: 
            { yybegin(YYINITIAL); addToken(start,zzStartRead+2-1, Token.COMMENT_MULTILINE);
            }
          case 33: break;
          case 16: 
            { addToken(Token.FUNCTION);
            }
          case 34: break;
          case 17: 
            { addToken(Token.ERROR_STRING_DOUBLE);
            }
          case 35: break;
          case 18: 
            { addToken(Token.DATA_TYPE);
            }
          case 36: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
